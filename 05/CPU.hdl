// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    
    Not(in = instruction[15],out = A);  //A instruction
    Not(in = A,out = C);  //C instruction

    And(a = C,b = instruction[5],out = c1);  //control 1

    Mux16(a = instruction,b = tempout,sel = c1,out = temp2);

    Or(a = c1, b =  A,out = c2);

   	ARegister(in = temp2,load = c2,out = temp3);         //Register A
   	Mux16(a = temp3,b = inM,sel = instruction[12],out = temp4);    //inM or RegA


   	And(a = C, b=instruction[4], out=loadD);
   	DRegister(in = tempout,load = loadD,out = temp5);        //Register D
   	
   	ALU(x = temp5,y = temp4,zx = instruction[11],nx = instruction[10],zy = instruction[9],ny = instruction[8],f = instruction[7],no = instruction[6],out = tempout,zr = zr,ng = ng);                    //ALU out

   	Or16(a = tempout,b = tempout,out = outM);
   	

   	
   	And(a = instruction[15],b = instruction[3],out = writeM);
   	Or16(a = false,b = temp3,out[0..14] = addressM);
   	


   	//CAL of load and inc
   	And(a = zr, b = instruction[1], out = jeq);    // is zero and jump if zero
    And(a = ng, b = instruction[2], out = jlt);    // is neg and jump if neg
    Or(a = zr, b = ng, out = zeroOrNeg);
    Not(in = zeroOrNeg, out = positive);            // is positive (not zero and not neg)
    And(a = positive, b = instruction[0], out = jgt); // is pos and jump if pos
    Or(a = jeq, b = jlt, out = jle);
    Or(a = jle, b = jgt, out = jumpToA);              // load PC if cond met and jump if cond
    And(a = instruction[15], b = jumpToA, out = PCload); // Only jump if C instruction
    Not(in = PCload, out = PCinc);                  // only inc if not load
    PC(in = temp4,load = PCload,inc = PCinc,reset = reset,out[0..14] = pc);


}